% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_rf_model_with_cv.R
\name{get_rf_model_with_cv}
\alias{get_rf_model_with_cv}
\title{Random Forest with Cross-Validation}
\usage{
get_rf_model_with_cv(
  ml_formatted_scores_df,
  Undersample = FALSE,
  best.m = NULL,
  testReps,
  Type
)
}
\arguments{
\item{Undersample}{Optional, logical
If \code{TRUE}, balances the dataset by undersampling the majority class. Default is \code{FALSE}.}

\item{best.m}{Optional, numeric or \code{NULL}
Specifies the number of predictors sampled at each split. If \code{NULL}, the default value of \code{randomForest} is used.}

\item{testReps}{Mandatory, integer
The number of cross-validation repetitions. Must be at least 2.}

\item{Type}{Mandatory, numeric
Specifies the importance metric type: \code{1} for Mean Decrease Accuracy or \code{2} for Gini.}

\item{Data}{Mandatory, data frame
#' First column is \code{Target_Organ}, followed by columns with score values.
The input dataset, which must include a column named \code{Target_Organ} as the response variable.}
}
\value{
A list with the following elements:
\itemize{
\item \code{performance_metrics}: A vector of aggregated performance metrics, including sensitivity, specificity, and accuracy.
\item \code{raw_results}: A list containing raw sensitivity, specificity, and accuracy values for each cross-validation fold.
}
}
\description{
This function builds a random forest model using the \code{randomForest} package, evaluates it through cross-validation,
and computes performance metrics such as sensitivity, specificity, and accuracy.
It optionally applies undersampling to handle class imbalance and supports custom settings for the number of predictors sampled at each split.
}
\details{
This function splits the input data into training and testing subsets based on the specified \code{testReps} cross-validation folds.
If undersampling is enabled, the function balances the training set to reduce class imbalance.
A random forest model is trained on the training set, and predictions are evaluated on the test set. The results are aggregated to provide summary performance metrics.
}
\examples{
\dontrun{
# Load necessary libraries
library(randomForest)
library(caret)

# Example dataset

Data$Target_Organ <- ifelse(iris$Species == "setosa", 1, 0)
Data <- Data[, -5]  # Remove Species column

# Run the function
results <- get_rf_model_with_cv(Data = iris,
                               Undersample = TRUE,
                                best.m = 2,
                                testReps = 5,
                                Type = 2)

# Print results
print(results$performance_metrics)
}

}
